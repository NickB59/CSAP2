//© A+ Computer Science  -  www.apluscompsci.com
//Name -
//Date -
//Class -
//Lab  -

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Canvas;
import java.awt.event.ActionEvent;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import static java.lang.Character.*;
import java.awt.image.BufferedImage;
import java.awt.event.ActionListener;

public class Pong extends Canvas implements KeyListener, Runnable 
/*Entire class is made so that with each ball type, game ball can be quickly interchanged. 
Be sure to change all instances before running.  Currently set to BlinkyBall. */
{
	private Ball ball;
//	private SpeedUpBall ball1;
//	private BlinkyBall ball2;
	private Paddle leftPaddle;
	private Paddle rightPaddle;
	private boolean[] keys;
	private BufferedImage back;
	private int leftscore=0;
	private int rightscore=0;
	/*private Wall left;
	private Wall right;
	private Wall top;
	private Wall bottom;*/

	public Pong()
	{
		//set up all variables related to the game
		ball = new Ball(100,100,25,25,Color.CYAN,2,2);
//		ball = new SpeedUpBall(100,100,25,25,Color.CYAN,2,2);
//		ball = new BlinkyBall(100,100,25,25,Color.CYAN,2,2);
		
		leftPaddle = new Paddle(10,100,20,60,Color.RED,5);
		rightPaddle = new Paddle(750,100,20,60,Color.RED,5);

		keys = new boolean[4];

    
    	setBackground(Color.WHITE);
		setVisible(true);
		
		new Thread(this).start();
		addKeyListener(this);		//starts the key thread to log key strokes
	}
	
   public void update(Graphics window){
	   paint(window);
   }

   public void paint(Graphics window)
   {
		//set up the double buffering to make the game animation nice and smooth
		Graphics2D twoDGraph = (Graphics2D)window;

		//take a snap shop of the current screen and same it as an image
		//that is the exact same width and height as the current screen
		if(back==null)
		   back = (BufferedImage)(createImage(getWidth(),getHeight()));

		//create a graphics reference to the back ground image
		//we will draw all changes on the background image
		Graphics graphToBack = back.createGraphics();


		ball.moveAndDraw(graphToBack);
		leftPaddle.draw(graphToBack);
		rightPaddle.draw(graphToBack);
		graphToBack.setColor(Color.GREEN);
		graphToBack.drawString("Left Score: "+leftscore, 50, 50);
		graphToBack.drawString("Right Score: "+rightscore, 50, 80);
		
		//Only usable with InvisibleBall--DOES NOT WORK :(
//		if(ball.isInvisible()==false){
//			long current = System.currentTimeMillis();
//			long stime = current+(int)(Math.random()*10000);
//			long etime = stime+(int)(Math.random()*10000);
//			do{
//				ball.goInvisible(graphToBack);
//				System.out.print(ball.isInvisible());
//			}while(System.currentTimeMillis()>stime&&System.currentTimeMillis()<etime);
//			
//			if(etime<System.currentTimeMillis())
//				ball.backVisible(graphToBack);
//		}
		
		

		if(keys[0] == true)
		{
			//move left paddle up and draw it on the window
			leftPaddle.moveUpAndDraw(graphToBack);
		}
		if(keys[1] == true)
		{
			//move left paddle down and draw it on the window
			leftPaddle.moveDownAndDraw(graphToBack);

		}
		if(keys[2] == true)
		{
			//move right paddle up and draw it on the window
			rightPaddle.moveUpAndDraw(graphToBack);
		}
		if(keys[3] == true)
		{
			//move right paddle down and draw it on the window
			rightPaddle.moveDownAndDraw(graphToBack);
		}


		
		twoDGraph.drawImage(back, null, 0, 0);
	}

	public void keyPressed(KeyEvent e)
	{
		switch(toUpperCase(e.getKeyChar()))
		{
			case 'W' : keys[0]=true; break;
			case 'Z' : keys[1]=true; break;
			case 'I' : keys[2]=true; break;
			case 'M' : keys[3]=true; break;
		}
	}

	public void keyReleased(KeyEvent e)
	{
		switch(toUpperCase(e.getKeyChar()))
		{
			case 'W' : keys[0]=false; break;
			case 'Z' : keys[1]=false; break;
			case 'I' : keys[2]=false; break;
			case 'M' : keys[3]=false; break;
		}
	}

	public void keyTyped(KeyEvent e){}
	
   public void run()
   {
   	try
   	{
   		while(true)
   		{
   		   Thread.currentThread().sleep(8);
            repaint();
         }
      }catch(Exception e)
      {
      }
  	}	
}